{"version":3,"sources":["n1-main/m1-components/Login/Login.module.css","n1-main/m1-components/Header/Navbar/Navbar.module.css","n1-main/m1-components/Header/Header.module.css","n1-main/App.module.css","n1-main/m1-components/common/Button/Button.module.css","n1-main/m1-components/common/Input/Input.module.css","n1-main/m1-components/SignUp/SignUp.module.css","n1-main/m1-components/Profile/Profile.module.css","n1-main/m1-components/RecoverPass/RecoverPass.module.css","n1-main/m1-components/ChangePass/ChangePass.module.css","assets/ing/logo.png","n1-main/m2-redux/registerReducer.ts","n1-main/m2-redux/signInReducer.ts","n1-main/m2-redux/recoverPassReducer.ts","n1-main/m2-redux/changePassReducer.ts","n1-main/m2-redux/profileReducer.ts","n1-main/m2-redux/store.ts","n1-main/m1-components/common/Button/Button.tsx","n1-main/m1-components/common/Input/Input.tsx","n1-main/m1-components/Login/Login.tsx","n1-main/m1-components/SignUp/SignUp.tsx","n1-main/m1-components/Profile/Profile.tsx","n1-main/m1-components/RecoverPass/RecoverPass.tsx","n1-main/m1-components/ChangePass/ChangePass.tsx","n1-main/m1-components/Routes/Routes.tsx","n1-main/m1-components/Header/Navbar/Navbar.tsx","n1-main/m1-components/Header/Header.tsx","n1-main/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","rootReducers","combineReducers","signUp","state","action","type","signIn","recoverPass","changePass","profile","store","createStore","applyMiddleware","thunkMiddleware","window","Button","props","restProps","className","styles","button","name","Input","onEnter","error","input","onKeyPress","event","key","LoginForm","loginForm","placeholder","value","email","onChange","setEmail","password","setPassword","recoverPassword","to","RECOVER_PASS_PATH","activeClassName","active","rememberMe","checked","setRememberMe","onClick","onSubmit","Login","useState","setEmailCallback","useCallback","e","currentTarget","setPasswordCallback","setRememberMeCallback","loginWrapper","title","alert","SignUp","pageWrapper","Profile","RecoverPass","ChangePass","Routes","exact","path","render","Navbar","menuList","Header","headerWrapper","headerContainer","titleWrapper","logo","src","alt","App","basename","process","app","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,MAAQ,qBAAqB,UAAY,yBAAyB,gBAAkB,+BAA+B,WAAa,0BAA0B,OAAS,wB,kBCAhOD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,OAAS,yB,iBCA/DD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,gBAAkB,gCAAgC,aAAe,6BAA6B,KAAO,uB,0BCArKD,EAAOC,QAAU,CAAC,IAAM,mB,kBCAxBD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,YAAc,8B,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,+B,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,kC,gBCDhCD,EAAOC,QAAU,IAA0B,kC,8LCErCC,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCMjBC,EAAeC,YAAgB,CAC/BC,OLJ2B,WAA4E,IAA3EC,EAA0E,uDAAhDJ,EAAcK,EAAkC,uCAI9F,OAHAA,EAAOC,KAGAF,GKCfG,OJLyB,WAA4E,IAA3EH,EAA0E,uDAAhDJ,EAAcK,EAAkC,uCAI5F,OAHAA,EAAOC,KAGAF,GIEfI,YHN8B,WAA4E,IAA3EJ,EAA0E,uDAAhDJ,EAAcK,EAAkC,uCAIjG,OAHAA,EAAOC,KAGAF,GGGfK,WFP6B,WAA4E,IAA3EL,EAA0E,uDAAhDJ,EAAcK,EAAkC,uCAIhG,OAHAA,EAAOC,KAGAF,GEIfM,QDR0B,WAA4E,IAA3EN,EAA0E,uDAAhDJ,EAAcK,EAAkC,uCAI7F,OAHAA,EAAOC,KAGAF,KCSNO,EAAQC,YAAYX,EAAcY,YAAgBC,MAI/DC,OAAOJ,MAAQA,E,oECVAK,EAPA,SAACC,GAA4B,IAC9BC,EAD6B,iBAChBD,GACvB,OACI,0CAAQE,UAAWC,IAAOC,QAAYH,GAAYD,EAAMK,O,yBCejDC,EAjBD,SAACN,GAA2B,IAC/BO,EAAgCP,EAAhCO,QAASC,EAAuBR,EAAvBQ,MAAUP,EADW,YACED,EADF,qBASrC,OACI,oCACI,yCAAOE,UAAWC,IAAOM,OAAWR,EAApC,CAAgDS,WARnC,SAACC,GACdJ,GAAyB,UAAdI,EAAMC,KACjBL,QAOCC,EAAQ,8BAAOA,GAAgB,KCoCtCK,EAAY,SAACb,GAEf,OACI,oCACI,0BAAME,UAAWC,IAAOW,WACpB,6BACI,kBAAC,EAAD,CAAOC,YAAY,QACZ1B,KAAK,QACL2B,MAAOhB,EAAMiB,MACbC,SAAUlB,EAAMmB,YAE3B,6BACI,kBAAC,EAAD,CAAOJ,YAAY,WACZ1B,KAAK,WACL2B,MAAOhB,EAAMoB,SACbF,SAAUlB,EAAMqB,eAE3B,yBAAKnB,UAAWC,IAAOmB,iBACnB,kBAAC,IAAD,CAASC,GAAIC,EAAmBC,gBAAiBtB,IAAOuB,QAAxD,qBAGJ,yBAAKxB,UAAWC,IAAOwB,YACnB,kBAAC,EAAD,CACItC,KAAK,WACLgB,KAAK,aACLuB,QAAS5B,EAAM2B,WACfT,SAAUlB,EAAM6B,gBAEpB,gDAEJ,kBAAC,EAAD,CAAQxB,KAAK,UAAUyB,QAAS9B,EAAM+B,YAE1C,yBAAK7B,UAAWC,IAAOjB,QACnB,iDAAsB,kBAAC,IAAD,CAASqC,GAAI,UACJE,gBAAiBtB,IAAOuB,QADjC,WAAtB,YAQDM,EAvFD,WAAO,IAAD,EAEUC,mBAAiB,IAF3B,mBAEThB,EAFS,KAEFE,EAFE,OAGgBc,mBAAiB,IAHjC,mBAGTb,EAHS,KAGCC,EAHD,OAIoBY,oBAAkB,GAJtC,mBAITN,EAJS,KAIGE,EAJH,KAMVK,EAAmBC,uBAAY,SAACC,GAAD,OAAsCjB,EAASiB,EAAEC,cAAcrB,SAChG,CAACG,IAECmB,EAAsBH,uBAAY,SAACC,GAAD,OAAsCf,EAAYe,EAAEC,cAAcrB,SACtG,CAACK,IAECkB,EAAwBJ,uBAAY,SAACC,GAAD,OAAsCP,EAAcO,EAAEC,cAAcT,WAC1G,CAACC,IAOL,OACI,yBAAK3B,UAAWC,IAAOqC,cACnB,yBAAKtC,UAAWC,IAAOsC,OACnB,sCAEJ,kBAAC,EAAD,CAAWxB,MAAOA,EACPE,SAAUe,EACVd,SAAUA,EACVC,YAAaiB,EACbX,WAAYA,EACZE,cAAeU,EACfR,SAfF,WACbW,MAAM,c,iBCdCC,EARA,WACX,OACI,yBAAKzC,UAAWC,IAAOyC,aAAvB,Y,iBCOOC,EARC,WACZ,OACI,yBAAK3C,UAAWC,IAAOyC,aACnB,yC,iBCIGE,EARK,WAChB,OACI,yBAAK5C,UAAWC,IAAOyC,aAAvB,qB,iBCMOG,EARI,WACf,OACI,yBAAK7C,UAAWC,IAAOyC,aAAvB,oBCOKpB,EAAoB,mBAmBlBwB,EAdU,WACrB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,IAAD,CAAU5B,GAVhC,cAYhB,kBAAC,IAAD,CAAO2B,KAZS,SAYWC,OAAQ,kBAAM,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOD,KAZS,UAYWC,OAAQ,kBAAM,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOD,KAAM1B,EAAmB2B,OAAQ,kBAAM,kBAAC,EAAD,SAC9C,kBAAC,IAAD,CAAOD,KAZS,WAYWC,OAAQ,kBAAM,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOD,KAZa,kBAYWC,OAAQ,kBAAM,kBAAC,EAAD,WCN1CC,EAfA,WAEX,OACI,6BACI,yBAAKlD,UAAWC,IAAOkD,UACnB,kBAAC,IAAD,CAAS9B,GDGG,WCHeE,gBAAiBtB,IAAOuB,QAAnD,WACA,kBAAC,IAAD,CAASH,GDAG,UCAeE,gBAAiBtB,IAAOuB,QAAnD,WACA,kBAAC,IAAD,CAASH,GAAIC,EAAmBC,gBAAiBtB,IAAOuB,QAAxD,oBACA,kBAAC,IAAD,CAASH,GDCO,kBCDeE,gBAAiBtB,IAAOuB,QAAvD,sB,kCCUD4B,GAfA,WACX,OACI,yBAAKpD,UAAWC,IAAOoD,eACnB,yBAAKrD,UAAWC,IAAOqD,iBACnB,yBAAKtD,UAAWC,IAAOsD,cACnB,yBAAKvD,UAAWC,IAAOuD,KAAMC,IAAKD,IAAME,IAAI,SAC5C,sCAEJ,kBAAC,EAAD,MACA,kBAAC,IAAD,CAASrC,GFPG,UEOe,kBAAC,EAAD,CAAQlB,KAAK,cCOzCwD,GAdH,WAER,OACI,kBAAC,IAAD,CAAeC,SAAUC,UACrB,kBAAC,IAAD,CAAUrE,MAAOA,GACb,yBAAKQ,UAAWC,IAAO6D,KACnB,kBAAC,GAAD,MACA,kBAAC,EAAD,UCLAC,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvE,GACLwE,QAAQxE,MAAMA,EAAMyE,c","file":"static/js/main.c0e77aeb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__yzoF1\",\"title\":\"Login_title__dOAr6\",\"loginForm\":\"Login_loginForm__2yZxj\",\"recoverPassword\":\"Login_recoverPassword__1337n\",\"rememberMe\":\"Login_rememberMe__1jBv-\",\"signUp\":\"Login_signUp__26eoB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menuList\":\"Navbar_menuList__YxiQ8\",\"active\":\"Navbar_active__cuqUY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__3AKcg\",\"headerContainer\":\"Header_headerContainer__38aWY\",\"titleWrapper\":\"Header_titleWrapper__zgUzc\",\"logo\":\"Header_logo__nLmbb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2Qw7z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2jq7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1XhFv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"SignUp_pageWrapper__2aZ7m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"Profile_pageWrapper__eLigE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"RecoverPass_pageWrapper__Ai7Uz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"ChangePass_pageWrapper__ECAJ8\"};","module.exports = __webpack_public_path__ + \"static/media/logo.a4aedb73.png\";","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const signInReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const recoverPassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const changePassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {registerReducer} from \"./registerReducer\";\r\nimport {signInReducer} from \"./signInReducer\";\r\nimport {recoverPassReducer} from \"./recoverPassReducer\";\r\nimport {changePassReducer} from \"./changePassReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    signUp: registerReducer,\r\n    signIn: signInReducer,\r\n    recoverPass: recoverPassReducer,\r\n    changePass: changePassReducer,\r\n    profile: profileReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype   ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n    const {...restProps} = props;\r\n    return (\r\n        <button className={styles.button} {...restProps}>{props.name}</button>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n\r\n// <button className={styles[props.buttonClass]} {...restProps}/>","import React, {DetailedHTMLProps, InputHTMLAttributes, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { onEnter?: () => void, error?: string };\r\n\r\nconst Input = (props: InputPropsType) => {\r\n    const {onEnter, error, ...restProps} = props;\r\n\r\n    const onClickEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (onEnter && event.key === \"Enter\") {\r\n            onEnter()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className={styles.input} {...restProps}  onKeyPress={onClickEnter}/>\r\n            {error ? <span>{error}</span> : ''}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport styles from './Login.module.css'\r\nimport Button from \"../common/Button/Button\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {RECOVER_PASS_PATH} from \"../Routes/Routes\";\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\n    const setEmailCallback = useCallback((e: ChangeEvent<HTMLInputElement>) => setEmail(e.currentTarget.value),\r\n        [setEmail]);\r\n\r\n    const setPasswordCallback = useCallback((e: ChangeEvent<HTMLInputElement>) => setPassword(e.currentTarget.value),\r\n        [setPassword]);\r\n\r\n    const setRememberMeCallback = useCallback((e: ChangeEvent<HTMLInputElement>) => setRememberMe(e.currentTarget.checked),\r\n        [setRememberMe]);\r\n\r\n\r\n    const onSubmit = () => {\r\n        alert('Login')\r\n    };\r\n\r\n    return (\r\n        <div className={styles.loginWrapper}>\r\n            <div className={styles.title}>\r\n                <h2>Login</h2>\r\n            </div>\r\n            <LoginForm email={email}\r\n                       setEmail={setEmailCallback}\r\n                       password={password}\r\n                       setPassword={setPasswordCallback}\r\n                       rememberMe={rememberMe}\r\n                       setRememberMe={setRememberMeCallback}\r\n                       onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype PropsType = {\r\n    email: string\r\n    setEmail: (email: ChangeEvent<HTMLInputElement>) => void\r\n    password: string\r\n    setPassword: (password: ChangeEvent<HTMLInputElement>) => void\r\n    rememberMe: boolean\r\n    setRememberMe: (rememberMe: ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n}\r\n\r\nconst LoginForm = (props: PropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <form className={styles.loginForm}>\r\n                <div>\r\n                    <Input placeholder='Email'\r\n                           type='email'\r\n                           value={props.email}\r\n                           onChange={props.setEmail}/>\r\n                </div>\r\n                <div>\r\n                    <Input placeholder='Password'\r\n                           type='password'\r\n                           value={props.password}\r\n                           onChange={props.setPassword}/>\r\n                </div>\r\n                <div className={styles.recoverPassword}>\r\n                    <NavLink to={RECOVER_PASS_PATH} activeClassName={styles.active}>Forgot password?</NavLink>\r\n                </div>\r\n\r\n                <div className={styles.rememberMe}>\r\n                    <Input\r\n                        type='checkbox'\r\n                        name='rememberMe'\r\n                        checked={props.rememberMe}\r\n                        onChange={props.setRememberMe}\r\n                    />\r\n                    <label> remember me</label>\r\n                </div>\r\n                <Button name='Sign in' onClick={props.onSubmit}/>\r\n            </form>\r\n            <div className={styles.signUp}>\r\n                <span>Not registered! <NavLink to={'/signUp'}\r\n                                               activeClassName={styles.active}>Sign up</NavLink> now.</span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport styles from './SignUp.module.css'\r\n\r\nconst SignUp = () => {\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            Sign Up\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp","import React from \"react\";\r\nimport styles from './Profile.module.css'\r\n\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            <h2>Profile</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport styles from './RecoverPass.module.css'\r\n\r\nconst RecoverPass = () => {\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            Recover password\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecoverPass\r\n","import React from \"react\";\r\nimport styles from './ChangePass.module.css'\r\n\r\nconst ChangePass = () => {\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            Change password\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangePass\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Login from \"../Login/Login\";\r\nimport SignUp from \"../SignUp/SignUp\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport RecoverPass from '../RecoverPass/RecoverPass';\r\nimport ChangePass from \"../ChangePass/ChangePass\";\r\n\r\n\r\n// all project paths\r\nexport const SIGN_IN_PATH = '/login';\r\nexport const SIGN_UP_PATH = '/signUp';\r\nexport const RECOVER_PASS_PATH = '/recoverPassword';\r\nexport const PROFILE_PATH = '/profile';\r\nexport const CHANGE_PASS_PATH = '/changePassword';\r\n\r\n\r\nconst Routes: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={'/'} render={() => <Redirect to={SIGN_IN_PATH}/>}/>\r\n\r\n            <Route path={SIGN_IN_PATH} render={() => <Login/>}/>\r\n            <Route path={SIGN_UP_PATH} render={() => <SignUp/>}/>\r\n            <Route path={RECOVER_PASS_PATH} render={() => <RecoverPass/>}/>\r\n            <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n            <Route path={CHANGE_PASS_PATH} render={() => <ChangePass/>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport styles from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {CHANGE_PASS_PATH, PROFILE_PATH, RECOVER_PASS_PATH, SIGN_UP_PATH} from \"../../Routes/Routes\";\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.menuList}>\r\n                <NavLink to={PROFILE_PATH} activeClassName={styles.active}>profile</NavLink>\r\n                <NavLink to={SIGN_UP_PATH} activeClassName={styles.active}>sign up</NavLink>\r\n                <NavLink to={RECOVER_PASS_PATH} activeClassName={styles.active}>recover password</NavLink>\r\n                <NavLink to={CHANGE_PASS_PATH} activeClassName={styles.active}>change password</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport styles from './Header.module.css'\r\nimport logo from '../../../assets/ing/logo.png'\r\nimport Button from \"../common/Button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {SIGN_IN_PATH} from \"../Routes/Routes\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.headerWrapper}>\r\n            <div className={styles.headerContainer}>\r\n                <div className={styles.titleWrapper}>\r\n                    <img className={styles.logo} src={logo} alt='logo'/>\r\n                    <h1>Cards</h1>\r\n                </div>\r\n                <Navbar/>\r\n                <NavLink to={SIGN_IN_PATH}><Button name='Login'/></NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './m2-redux/store';\r\nimport Header from \"./m1-components/Header/Header\";\r\n\r\nimport Routes from \"./m1-components/Routes/Routes\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <div className={styles.app}>\r\n                    <Header/>\r\n                    <Routes/>\r\n                </div>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './n1-main/index.css';\nimport App from './n1-main/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}