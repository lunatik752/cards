{"version":3,"sources":["n1-main/m1-components/Login/Login.module.css","n1-main/m1-components/Header/Navbar/Navbar.module.css","n1-main/m1-components/Header/Header.module.css","n1-main/App.module.css","assets/ing/logo.png","n1-main/m1-components/common/Button/Button.module.css","n1-main/m1-components/Profile/Profile.module.css","n1-main/m1-components/anotherPage/AnotherPage.module.css","n1-main/m1-components/common/Input/Input.module.css","n1-main/m2-redux/loginReducer.ts","n1-main/m2-redux/registerReducer.ts","n1-main/m2-redux/store.ts","n1-main/m1-components/Header/Navbar/Navbar.tsx","n1-main/m1-components/common/Button/Button.tsx","n1-main/m1-components/Header/Header.tsx","n1-main/m1-components/Profile/Profile.tsx","n1-main/m1-components/anotherPage/AnotherPage.tsx","n1-main/m1-components/common/Input/Input.tsx","n1-main/m1-components/Login/Login.tsx","n1-main/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","rootReducers","combineReducers","login","state","action","type","signUp","store","createStore","applyMiddleware","thunkMiddleware","Navbar","className","styles","menuList","to","activeClassName","active","Button","props","style","button","onClick","disabled","title","Header","headerWrapper","headerContainer","titleWrapper","logo","src","alt","Profile","pageWrapper","AnotherPage","Input","input","placeholder","placeholderValue","LoginForm","loginForm","recoverPassword","rememberMe","name","onSubmit","Login","loginWrapper","alert","App","app","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58e42efd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__yzoF1\",\"title\":\"Login_title__dOAr6\",\"loginForm\":\"Login_loginForm__2yZxj\",\"recoverPassword\":\"Login_recoverPassword__1337n\",\"rememberMe\":\"Login_rememberMe__1jBv-\",\"signUp\":\"Login_signUp__26eoB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menuList\":\"Navbar_menuList__YxiQ8\",\"active\":\"Navbar_active__cuqUY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__3AKcg\",\"headerContainer\":\"Header_headerContainer__38aWY\",\"titleWrapper\":\"Header_titleWrapper__zgUzc\",\"logo\":\"Header_logo__nLmbb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2Qw7z\"};","module.exports = __webpack_public_path__ + \"static/media/logo.a4aedb73.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2jq7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"Profile_pageWrapper__eLigE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"AnotherPage_pageWrapper__1BqLi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1XhFv\"};","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\n\r\n\r\n// action creators\r\n\r\n\r\n// Thunk\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport {registerReducer} from \"./registerReducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    login: loginReducer,\r\n    signUp: registerReducer\r\n});\r\n\r\n\r\ntype RootReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<RootReducersType>\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\nexport default store","import React from 'react';\r\nimport styles from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.menuList}>\r\n                <NavLink to={'/profile'} activeClassName={styles.active}>profile</NavLink>\r\n                <NavLink to={'/signUp'} activeClassName={styles.active}>sign up</NavLink>\r\n                <NavLink to={'/recoverPassword'} activeClassName={styles.active}>recover password</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype PropsType = {\r\n    title: string\r\n    disabled?: boolean\r\n    onClick?: () => void\r\n\r\n}\r\n\r\nconst Button = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <button className={style.button}\r\n                    onClick={props.onClick}\r\n                    disabled={props.disabled}\r\n            >{props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport styles from './Header.module.css'\r\nimport logo from '../../../assets/ing/logo.png'\r\nimport Button from \"../common/Button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.headerWrapper}>\r\n            <div className={styles.headerContainer}>\r\n                <div className={styles.titleWrapper}>\r\n                    <img className={styles.logo} src={logo} alt='logo'/>\r\n                    <h1>Cards</h1>\r\n                </div>\r\n                <Navbar/>\r\n                <NavLink to={'/login'}><Button title='Login'/></NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport styles from './Profile.module.css'\r\n\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            <h2>Profile</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport styles from './AnotherPage.module.css'\r\n\r\n\r\nconst AnotherPage = () => {\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            another page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnotherPage","import React from 'react';\r\nimport styles from './Input.module.css'\r\n\r\ntype PropsType = {\r\n    type: string\r\n    placeholderValue: string\r\n    error?: boolean\r\n\r\n}\r\n\r\nconst Input = (props: PropsType) => {\r\n\r\n    return (\r\n        <input className={styles.input}                  //{`${styles.input} ${props.error ? styles.error : ''}`}\r\n               type={props.type}\r\n               placeholder={props.placeholderValue}\r\n            // onChange={onInputChange}\r\n            // onKeyPress={onKeyPress}\r\n            // value={props.inputText}\r\n        />\r\n    )\r\n};\r\n\r\n\r\nexport default Input;","import React from 'react';\r\nimport styles from './Login.module.css'\r\nimport Button from \"../common/Button/Button\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const onSubmit = () => {\r\n        alert('Login')\r\n    };\r\n\r\n    return (\r\n        <div className={styles.loginWrapper}>\r\n            <div className={styles.title}>\r\n                <h2>Login</h2>\r\n            </div>\r\n            <LoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype PropsType = {\r\n    onSubmit: () => void\r\n}\r\n\r\nconst LoginForm = (props: PropsType) => {\r\n    return (\r\n        <>\r\n            <form className={styles.loginForm}>\r\n                <div>\r\n                    <Input placeholderValue='Email'\r\n                           type='email'/>\r\n                </div>\r\n                <div>\r\n                    <Input placeholderValue='Password'\r\n                           type='password'/>\r\n                </div>\r\n                <div className={styles.recoverPassword}>\r\n                    <NavLink to={'/recoverPassword'} activeClassName={styles.active}>Forgot password?</NavLink>\r\n                </div>\r\n\r\n                <div className={styles.rememberMe}>\r\n                    <input\r\n                        type='checkbox'\r\n                        name='rememberMe'\r\n                    />\r\n                    <label> remember me</label>\r\n                </div>\r\n                <Button title='Sign in' onClick={props.onSubmit}/>\r\n            </form>\r\n            <div className={styles.signUp}>\r\n            <span>Not registered! <NavLink to={'/recoverPassword'} activeClassName={styles.active}>Sign up</NavLink> now.</span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Login;","import React from 'react';\nimport styles from './App.module.css';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport store from './m2-redux/store';\nimport Header from \"./m1-components/Header/Header\";\nimport Profile from \"./m1-components/Profile/Profile\";\nimport AnotherPage from \"./m1-components/anotherPage/AnotherPage\";\nimport Login from \"./m1-components/Login/Login\";\n\n\nconst App = () => {\n\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <div className={styles.app}>\n                    <Header/>\n                    <Route path={'/profile'} render={() => <Profile/>}/>\n                    <Route path='/anotherPage' render={() => <AnotherPage/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n            </Provider>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './n1-main/index.css';\nimport App from './n1-main/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}